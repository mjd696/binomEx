
==================== FINAL INTERFACE ====================
2016-01-04 17:20:07.7553527 UTC

interface binom_0zJysJg40Xh6pBzjwypzBi:Lib 7102
  interface hash: d857dde1b4aa911f581585850e57036f
  ABI hash: a2e23c24b04b217a35a7e5f15febfe4a
  export-list hash: 642499000de41af0d97b63c0ad0fbfbe
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 97c9325c2ddd4b6cf32544da9d27028a
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.someFunc
module dependencies:
package dependencies: base-4.8.1.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Monoid
                         base-4.8.1.0:Data.Type.Equality base-4.8.1.0:GHC.Generics
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.1.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.1.0:GHC.Float a2f1c8675ca4f780f3a8aa0b05d1a5eb
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:GHC.Real 4c3b525ecbd4d62bb287aec36d4c2f0d
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  base-4.8.1.0:System.IO 5482930cc48b7457dc7c518d05c22912
import  -/  base-4.8.1.0:Text.Read 30509137a501bd56d136aca29a7a35a6
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
dcf31e2304e95b17be477f2dd6bf3138
  $wfact :: GHC.Prim.Float# -> GHC.Prim.Float#
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
e73919361c6aa84194266939f75c733f
  $wfact1 :: GHC.Prim.Float# -> GHC.Prim.Float#
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
7c10b772de39ac6f1b6e488c9f2e77fe
  $wfact2 :: GHC.Prim.Float# -> GHC.Prim.Float#
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
fe0ff41b4f7ccb790ef839d3a9f7b46a
  someFunc :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.someFunc1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
851ec4e958b5ca590be57567ebb0f0d2
  someFunc1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Lib.someFunc10
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Lib.someFunc9
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (case Text.Read.readEither6
                           @ GHC.Types.Float
                           (Text.ParserCombinators.ReadP.run
                              @ GHC.Types.Float
                              Lib.someFunc8
                              ipv5) of wild {
                      [] -> Lib.someFunc3 __float -1.0 Lib.someFunc2
                      : x ds
                      -> case ds of wild1 {
                           [] -> case x of wild2 { GHC.Types.F# x1 -> Lib.someFunc3 x1 wild2 }
                           : ipv6 ipv7 -> Lib.someFunc3 __float -1.0 Lib.someFunc2 } })
                   GHC.Types.True
                   ipv4 } } }) -}
bf00155c0e807397376767107871019f
  someFunc10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Testing.."#) -}
339339f497482ef5dd98d1d33955c2de
  someFunc2 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# __float -1.0) -}
8fad2e526641109406e11ae275c0ef6e
  someFunc3 :: GHC.Prim.Float# -> GHC.Types.Float -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,U(U)>,
     Unfolding: (\ x :: GHC.Prim.Float#[OneShot]
                   wild :: GHC.Types.Float[OneShot] ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.leFloat# x __float 0.0) of wild1 {
                   GHC.Types.False
                   -> letrec {
                        $wgo :: [GHC.Types.Float] -> GHC.Prim.Float# -> GHC.Prim.Float#
                          {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
                        = \ w :: [GHC.Types.Float] ww :: GHC.Prim.Float# ->
                          case w of wild2 {
                            [] -> ww
                            : y ys
                            -> case Lib.$wfact2 x of ww1 { DEFAULT ->
                               case Lib.$wfact1
                                      (GHC.Prim.minusFloat# x __float 1.0) of ww2 { DEFAULT ->
                               case Lib.someFunc7 of wild3 { GHC.Types.F# y1 ->
                               case y of wild4 { GHC.Types.F# x1 ->
                               let {
                                 x2 :: GHC.Prim.Float# = GHC.Prim.divideFloat# x1 __float 100.0
                               } in
                               case GHC.Prim.divideFloat#
                                      ww1
                                      (GHC.Prim.timesFloat# ww2 y1) of wild5 { DEFAULT ->
                               $wgo
                                 ys
                                 (GHC.Prim.plusFloat#
                                    ww
                                    (GHC.Prim.timesFloat#
                                       (GHC.Prim.timesFloat#
                                          wild5
                                          (GHC.Prim.powerFloat# x2 __float 1.0))
                                       (GHC.Prim.powerFloat#
                                          (GHC.Prim.minusFloat# __float 1.0 x2)
                                          (GHC.Prim.minusFloat# x __float 1.0)))) } } } } } }
                      } in
                      case $wgo Lib.someFunc4 __float 0.0 of ww { DEFAULT ->
                      GHC.Float.$w$sshowSignedFloat1
                        GHC.Float.$fShowFloat_$sshowFloat
                        GHC.Show.shows18
                        ww
                        (GHC.Types.[] @ GHC.Types.Char) }
                   GHC.Types.True
                   -> GHC.CString.unpackCString# "Parameter must be > 0"# }) -}
caf65f98438485ed4cf9978af11cf32f
  someFunc4 :: [GHC.Types.Float]
  {- Unfolding: (GHC.Real.numericEnumFromTo
                   @ GHC.Types.Float
                   GHC.Classes.$fOrdFloat
                   GHC.Float.$fFractionalFloat
                   Lib.someFunc6
                   Lib.someFunc5) -}
895651d91f7207660dfc17cc662e25bb
  someFunc5 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 100.0) -}
9c45aeb6b6653e59240a573874cf95d6
  someFunc6 :: GHC.Types.Float
  {- HasNoCafRefs, Unfolding: (GHC.Types.F# __float 1.0) -}
8573c63c44f0b3ffd7092a15e4237eb1
  someFunc7 :: GHC.Types.Float
  {- Unfolding: (case Lib.$wfact __float 1.0 of ww { DEFAULT ->
                 GHC.Types.F# ww }) -}
9b0f33affa76d8fff89b5a204a90eb6d
  someFunc8 :: Text.ParserCombinators.ReadP.P GHC.Types.Float
  {- Unfolding: ((GHC.Read.$fReadFloat7
                    GHC.Read.$fReadFloat_$sconvertFrac
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <GHC.Types.Float>_R)
                   @ GHC.Types.Float
                   (Text.Read.readEither5 @ GHC.Types.Float)) -}
cb2d8c555b138c5474e7e1ff90386d70
  someFunc9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Input n:"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

